#include <iostream>
#include <vector>
using namespace std;

class FlightGraph {
private:
    vector<vector<int>> adjMatrix;
    vector<string> cities;
    int numCities;

public:
    FlightGraph(int n) {
        numCities = n;
        adjMatrix.resize(n, vector<int>(n, 0));
        cities.resize(n);
    }

    void inputCities() {
        cout << "Enter names of " << numCities << " cities:\n";
        for (int i = 0; i < numCities; i++) {
            cout << "City " << i + 1 << ": ";
            cin >> cities[i];  // Simple: no spaces in city names
        }
    }

    void addFlightPaths() {
        int time;
        cout << "\nEnter travel time in hours between cities (enter 0 if no direct flight):\n";
        for (int i = 0; i < numCities; i++) {
            for (int j = 0; j < numCities; j++) {
                if (i != j) {
                    cout << "Time from " << cities[i] << " to " << cities[j] << ": ";
                    cin >> time;
                    adjMatrix[i][j] = time;
                } else {
                    adjMatrix[i][j] = 0; // no self-flight time
                }
            }
        }
    }

    void displayAdjMatrix() {
        cout << "\nAdjacency Matrix Representation (Travel Time in Hours):\n\n";

        // Print column headers (city names)
        cout << "\t";
        for (int i = 0; i < numCities; i++) {
            cout << cities[i] << "\t";
        }
        cout << "\n";

        // Print rows
        for (int i = 0; i < numCities; i++) {
            cout << cities[i] << "\t";  // Row header
            for (int j = 0; j < numCities; j++) {
                cout << adjMatrix[i][j] << "\t";
            }
            cout << endl;
        }
    }

    void displayAllFlights() {
        cout << "\nAll Available Flight Times:\n";
        for (int i = 0; i < numCities; i++) {
            for (int j = 0; j < numCities; j++) {
                if (i != j) {
                    if (adjMatrix[i][j] > 0) {
                        cout << "Flight from " << cities[i] << " to " << cities[j]
                             << " takes " << adjMatrix[i][j] << " hour(s).\n";
                    } else {
                        cout << "No direct flight from " << cities[i] << " to " << cities[j] << ".\n";
                    }
                }
            }
        }
    }
};

int main() {
    int n;
    cout << "Enter number of cities: ";
    cin >> n;

    if (n <= 0) {
        cout << "Number of cities must be positive.\n";
        return 1;
    }

    FlightGraph graph(n);
    graph.inputCities();
    graph.addFlightPaths();
    graph.displayAdjMatrix();
    graph.displayAllFlights();

    return 0;
}
