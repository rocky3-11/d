#include <iostream> 
using namespace std; 
// Structure for a node in the threaded binary tree 
struct Node { 
    int data; 
    Node* left; 
    Node* right; 
    bool rightThread; // True if right pointer is a thread 
    // Constructor to initialize node 
    Node(int val) { 
        data = val; 
        left = right = nullptr; 
        rightThread = false; 
    } 
}; 
// Function to insert a node into the threaded binary tree 
Node* insert(Node* root, int key) { 
    Node* newNode = new Node(key); 
    if (!root) return newNode; // If tree is empty, create root node 
    Node* parent = nullptr; 
    Node* curr = root; 
    // Traverse the tree to find the correct position 
    while (curr) { 
        parent = curr; 
        if (key < curr->data) { 
            if (!curr->left) { 
                newNode->right = curr; 
                newNode->rightThread = true; 
                curr->left = newNode; 
                return root; 
            } 
            curr = curr->left; 
        } else { 
            if (curr->rightThread) { 
                newNode->right = curr->right; 
                newNode->rightThread = true; 
                curr->right = newNode; 
                curr->rightThread = false; 
                return root; 
            } 
            if (!curr->right) { 
                curr->right = newNode; 
                return root; 
            } 
            curr = curr->right; 
        } 
    } 
    return root; 
} 
 
// Function to find the leftmost node of a subtree 
Node* leftmost(Node* node) { 
    while (node && node->left) 
        node = node->left; 
    return node; 
} 
 
// Function for in-order traversal using threading 
void inorder(Node* root) { 
    Node* curr = leftmost(root); 
    while (curr) { 
        cout << curr->data << " "; // Print the node data 
         
        // If right pointer is a thread, follow it 
        if (curr->rightThread) 
            curr = curr->right; 
        else 
            curr = leftmost(curr->right); // Otherwise, move to leftmost of right subtree 
    } 
    cout << endl; 
} 
 
// Main function to demonstrate the threaded binary tree 
int main() { 
    Node* root = nullptr; 
    root = insert(root, 20); 
    root = insert(root, 40); 
    root = insert(root, 30); 
root = insert(root, 6); 
root = insert(root, 14); 
root = insert(root, 25); 
root = insert(root, 37); 
cout << "Inorder Traversal: "; 
inorder(root); 
return 0; 
}
